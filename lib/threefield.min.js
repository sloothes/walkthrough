/*!
 * @author yomotsu http://yomotsu.net/
 * MIT License
 */
var THREEFIELD={};THREEFIELD.normalizeAngle=function(a){return a>=0?a%360:a%360+360},THREEFIELD.howCloseBetweenAngles=function(a,b){var c=Math.min(THREEFIELD.normalizeAngle(a-b),THREEFIELD.normalizeAngle(b-a));return c},THREEFIELD.World=function(){console.log("THREEFIELD.World"),this.colliders=[],this.characters=[]},THREEFIELD.World.prototype.add=function(a){this.colliders.push(a)},THREEFIELD.World.prototype.addCharacter=function(a){this.characters.push(a)},THREEFIELD.World.prototype.step=function(a){{var b,c,d,e,f,g,h,i,j,k,l,m,n;new THREE.Vector3}for(g=0,k=this.characters.length;k>g;g++){for(b=this.characters[g],b.update(a),b.contactInfo.length=0,h=0,l=this.colliders.length;l>h;h++)if(c=this.colliders[h],d=THREEFIELD.World.sphereInAABB(b.position,b.radius,c.aabb))for(i=0,m=c.faces.length;m>i;i++)if(e=THREEFIELD.World.sphereVsTriangle(c.faces[i],c.normals[i],b.position,b.radius)){for(f=!1,j=0,n=b.contactInfo.length;n>j;j++)if(b.contactInfo[j].normal.x===e.normal.x&&b.contactInfo[j].normal.y===e.normal.y&&b.contactInfo[j].normal.z===e.normal.z){f=!0;break}f||b.contactInfo.push(e)}b.fixPosition()}},THREEFIELD.World.sphereInAABB=function(a,b,c){var d,e,f=Math.pow(b,2),g=0,h=["x","y","z"];for(e in h)d=h[e],a[d]<c.min[d]?g+=Math.pow(a[d]-c.min[d],2):a[d]>c.max[d]&&(g+=Math.pow(a[d]-c.max[d],2));return f>=g},THREEFIELD.World.sphereVsTriangle=function(a,b,c,d){var e,f,g,h=new THREE.Vector3,i=new THREE.Vector3,j=new THREE.Vector3,k=new THREE.Vector3;if(h.subVectors(a.a,c),i.subVectors(a.b,c),j.subVectors(a.c,c),e=d*d,k.crossVectors(i.clone().sub(h),j.clone().sub(h)),f=h.dot(k),g=k.dot(k),f*f>e*g)return!1;var l,m,n,o,p,q;if(l=h.dot(h),m=h.dot(i),n=h.dot(j),o=i.dot(i),p=i.dot(j),q=j.dot(j),l>e&m>l&n>l||o>e&m>o&p>o||q>e&n>q&p>q)return!1;var r,s,t,u,v,w,x=new THREE.Vector3,y=new THREE.Vector3,z=new THREE.Vector3,A=new THREE.Vector3,B=new THREE.Vector3,C=new THREE.Vector3,D=new THREE.Vector3,E=new THREE.Vector3,F=new THREE.Vector3;if(x.subVectors(i,h),y.subVectors(j,i),z.subVectors(h,j),r=m-l,s=p-o,t=n-q,u=x.dot(x),v=y.dot(y),w=z.dot(z),A.subVectors(h.multiplyScalar(u),x.multiplyScalar(r)),B.subVectors(i.multiplyScalar(v),y.multiplyScalar(s)),C.subVectors(j.multiplyScalar(w),z.multiplyScalar(t)),D.subVectors(j.multiplyScalar(u),A),E.subVectors(h.multiplyScalar(v),B),F.subVectors(i.multiplyScalar(w),C),A.dot(A)>e*u*u&&A.dot(D)>=0||B.dot(B)>e*v*v&&B.dot(E)>=0||C.dot(C)>e*w*w&&C.dot(F)>=0)return!1;var G=Math.sqrt(f*f/g)-d,H=THREEFIELD.World.getContactPoint(b,c,G);return{face:a,normal:b,distance:G,contactPoint:H}},THREEFIELD.World.getContactPoint=function(a,b,c){var d=new THREE.Vector3,e=new THREE.Vector3(-a.x,-a.y,-a.z);return d.copy(b).add(e.multiplyScalar(c)),d},THREEFIELD.Collider=function(a){var b,c,d;for(this.mesh=a,this.faces=[],this.normals=[],this.aabb=null,a.updateMatrix(),a.geometry.applyMatrix(a.matrix),a.matrix.identity(),a.position.set(0,0,0),a.rotation.set(0,0,0),a.scale.set(1,1,1),a.geometry.verticesNeedUpdate=!0,a.updateMatrixWorld(),a.geometry.computeFaceNormals(),a.geometry.computeVertexNormals(),a.geometry.computeBoundingBox(),this.aabb=a.geometry.boundingBox,b=this.mesh.geometry,c=0,d=b.faces.length;d>c;c++){b.faces[c].d&&console.log("still not supported");var e=b.vertices[b.faces[c].a],f=b.vertices[b.faces[c].b],g=b.vertices[b.faces[c].c];this.faces.push({a:e,b:f,c:g}),this.normals.push(b.faces[c].normal)}};